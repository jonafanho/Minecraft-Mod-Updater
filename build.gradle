import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id "java"
	id "de.undercouch.download" version "4.1.2"
}

group "updater"
version rootProject.version

def minecraft_version = "1.18.2"

jar {
	manifest {
		attributes "Main-Class": "updater.MinecraftModUpdater"
	}
}

task setupFiles() {
	def fabric_loader_version = new JsonSlurper().parse(("https://meta.fabricmc.net/v2/versions/loader/" + minecraft_version).toURL())[0]["loader"]["version"]
	System.out.println("Fabric Loader: " + fabric_loader_version)

	def files = ["ferium-linux-arm64-nogui", "ferium-linux", "ferium-macos-arm", "ferium-macos-x64", "ferium-windows-msvc"]
	files.forEach(file -> {
		download {
			src "https://github.com/gorilla-devs/ferium/releases/latest/download/${file}.zip"
			dest "temp/${file}.zip"
			overwrite true
			retries - 1
		}
		copy {
			outputs.upToDateWhen { false }
			from(zipTree("temp/${file}.zip"))
			into "temp/${file}"
			rename "(.+)", "ferium"
		}
		copy {
			outputs.upToDateWhen { false }
			from "temp/${file}"
			into "build/libs/${file}"
		}
	})

	copy {
		outputs.upToDateWhen { false }
		from "profile/mmc-pack.json"
		into "build/libs"
		filter(ReplaceTokens, tokens: ["fabric-loader": fabric_loader_version, "minecraft": minecraft_version])
	}
	copy {
		outputs.upToDateWhen { false }
		from "profile/instance.cfg"
		into "build/libs"
		filter(ReplaceTokens, tokens: ["version": rootProject.version])
	}
	copy {
		outputs.upToDateWhen { false }
		from "src/main/ConstantsTemplate.java"
		into "src/main/java/updater"
		filter(ReplaceTokens, tokens: ["version": minecraft_version, "files": String.join(",", files.collect { file -> '"' + file + '"' })])
		rename "(.+)Template.java", "\$1.java"
	}
}

allprojects {
	afterEvaluate {
		for (def task in it.tasks) {
			if (task != rootProject.tasks.setupFiles) {
				task.dependsOn rootProject.tasks.setupFiles
			}
		}
	}
}
